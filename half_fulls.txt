library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

entity half_subtractor is
    Port (
        A : in  STD_LOGIC;
        B : in  STD_LOGIC;
        Diff : out STD_LOGIC;
        Borrow : out STD_LOGIC
    );
end half_subtractor;

architecture Behavioral of half_subtractor is
begin
    Diff   <= A XOR B;
    Borrow <= (NOT A) AND B;
end Behavioral;
--------------------------------------------------------
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

entity tb_half_subtractor is
end tb_half_subtractor;

architecture Behavioral of tb_half_subtractor is

    component half_subtractor
        Port (
            A : in  STD_LOGIC;
            B : in  STD_LOGIC;
            Diff : out STD_LOGIC;
            Borrow : out STD_LOGIC
        );
    end component;

    signal A, B, Diff, Borrow : STD_LOGIC;

begin

    uut: half_subtractor
        Port map (
            A => A,
            B => B,
            Diff => Diff,
            Borrow => Borrow
        );

    process
    begin
        A <= '0'; B <= '0'; wait for 10 ns;
        A <= '0'; B <= '1'; wait for 10 ns;
        A <= '1'; B <= '0'; wait for 10 ns;
        A <= '1'; B <= '1'; wait for 10 ns;
        wait;
    end process;

end Behavioral;
--------------------------------------------==
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

entity full_subtractor is
    Port (
        A : in  STD_LOGIC;
        B : in  STD_LOGIC;
        Bin : in  STD_LOGIC;
        Diff : out STD_LOGIC;
        Bout : out STD_LOGIC
    );
end full_subtractor;

architecture Behavioral of full_subtractor is
begin
    Diff <= A XOR B XOR Bin;
    Bout <= (NOT A AND B) OR (B AND Bin) OR (NOT A AND Bin);
end Behavioral;
------------------------------------------------
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

entity tb_full_subtractor is
end tb_full_subtractor;

architecture Behavioral of tb_full_subtractor is

    component full_subtractor
        Port (
            A : in  STD_LOGIC;
            B : in  STD_LOGIC;
            Bin : in  STD_LOGIC;
            Diff : out STD_LOGIC;
            Bout : out STD_LOGIC
        );
    end component;

    signal A, B, Bin, Diff, Bout : STD_LOGIC;

begin

    uut: full_subtractor
        Port map (
            A => A,
            B => B,
            Bin => Bin,
            Diff => Diff,
            Bout => Bout
        );

    process
    begin
        A <= '0'; B <= '0'; Bin <= '0'; wait for 10 ns;
        A <= '0'; B <= '0'; Bin <= '1'; wait for 10 ns;
        A <= '0'; B <= '1'; Bin <= '0'; wait for 10 ns;
        A <= '0'; B <= '1'; Bin <= '1'; wait for 10 ns;
        A <= '1'; B <= '0'; Bin <= '0'; wait for 10 ns;
        A <= '1'; B <= '0'; Bin <= '1'; wait for 10 ns;
        A <= '1'; B <= '1'; Bin <= '0'; wait for 10 ns;
        A <= '1'; B <= '1'; Bin <= '1'; wait for 10 ns;
        wait;
    end process;

end Behavioral;
